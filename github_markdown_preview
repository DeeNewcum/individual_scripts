#!/usr/bin/perl

# The start of a live-preview script for writing README.md files on Github.
# It uses the Github itself to create the previews, so it should match Github's rendering exactly.
#
# Currently, it only does the conversion.  However, I plan to add more features
# (file-change detection, LiveReload.com) to make it work without manual intervention.

    use strict;
    use warnings;

    use LWP::Simple;
    use URI::Escape;

    use Data::Dumper;
    #use Devel::Comments;           # uncomment this during development to enable the ### debugging statements


my $filename = shift
    or die "usage: $0 <markdown_file>\n";

my $markdown = slurp($filename);

my $html = github_markdown_to_html($markdown);

print $html;




# convert Markdown to HTML, using Github to do the conversion, so you can be sure your preview
# looks exactly like it will look once you upload it
sub github_markdown_to_html {
    my ($markdown) = @_;
 
    ## the comment-preview function on gist normally uses POST, but GET works too:
    ##      https://gist.github.com/preview?text=this%20is%20a%20**test**

    return LWP::Simple::get("https://gist.github.com/preview?text=" .  URI::Escape::uri_escape_utf8($markdown));
}
        ## Currently, the above code uses GET instead of POST.
        ##
        ## I experimented with POST, but it failed.  I *believe* (90% confidence) that it's because
        ## it rejects POST unless you have logged in to Github.
        ##
        ## GET has file-length limitations, so we probably want to get this script working with
        ## POST at some point.
        ##
        ## See here for a great idea for logging in to Github for this script:
        ##      http://paperlined.org/dev/perl/modules/related_modules/use_browser_cookies.html



# quickly read a whole file
sub slurp {my$p=open(my$f,"$_[0]")or die$!;my@o=<$f>;close$f;waitpid($p,0);wantarray?@o:join("",@o)}
